---
description: 
globs: 
alwaysApply: true
---

# 開發時需要注意的細節和規則(跟資料庫有關一定要跟model做關聯)

## 專案項目: 台灣航班整合系統(進階功能先不考慮做)
**核心功能**:
專案是以網頁端結合linebot的專案，python為主要語言，前端為Vue。
請依序功能教學

- 查詢飛機航班(網頁)

條件：起飛地點、降落地點、時間起訖日（30 天內）、航空公司、價錢
結果：預計起飛時間、預計降落時間、航班公司、機長、飛機型號、價錢

整合購票功能、旅遊保險、各航空累積哩程查詢
- 同步 LINE 機器人

查詢飛機航班、延誤停飛提示、常用詞小幫手、推薦當地旅遊行程、機票價格漲幅提示
- 預測航班起降狀態

預測起降、預測當地天氣
- 社群平台(進階)

社群互動、舒適度評分

- 導覽地圖(進階)

查詢各機場內部設施平面圖

# 系統開發流程規劃(請按造由簡單到難功能開法)

## 1. 開發核心功能模組

### 1.1 航班查詢模組
- 實現航班搜索功能
- 開發篩選和排序功能
- 優化查詢性能

### 1.2 機票價格分析模組
- 處理價格追蹤功能
- 實現歷史趨勢分析
- 建立價格預測模型

### 1.3 用戶管理模組
- 處理用戶登錄和註冊流程
- 實現用戶資料管理
- 開發權限控制系統

### 1.4 資料同步模組
- 從外部API獲取航班資料
- 同步機場和航空公司資訊
- 建立資料更新機制

## 2. 設計API層

### 2.1 API架構選擇
- 評估RESTful或GraphQL方案
- 確定最終API技術架構

### 2.2 API開發
- 定義端點（endpoints）
- 實現標準化請求/響應格式
- 設計錯誤處理機制

### 2.3 安全機制
- 實現身份驗證系統
- 開發授權控制流程
- 建立API限流保護

## 3. 前端整合

### 3.1 Web應用程式
- 開發響應式網頁界面
- 優化用戶體驗流程
- 實現即時資料更新

### 3.2 LINE Bot整合
- 設計對話流程
- 開發航班查詢功能
- 實現訂票提醒服務

## 4. 測試策略

### 4.1 單元測試
- 測試各個獨立模型
- 驗證核心功能模組
- 確保代碼質量

### 4.2 整合測試
- 測試API與資料庫交互
- 驗證模組間整合
- 檢查系統兼容性

### 4.3 端到端測試
- 模擬完整用戶流程
- 測試關鍵業務路徑
- 驗證系統穩定性

## 5. 部署規劃

### 5.1 環境配置
- 設定開發環境
- 建立測試環境
- 部署生產環境

### 5.2 CI/CD管道
- 實現自動化構建
- 設置自動化測試
- 部署滾動更新機制

### 5.3 運維監控
- 規劃系統監控方案
- 建立日誌記錄系統
- 設置性能警報機制

    
## 代碼風格與組織

1. **使用一致的命名規範**：
   - Python 後端：使用 snake_case (如 `get_flight_info`)、使用 Django ORM框架。
   - JavaScript/Vue 前端：使用 camelCase (如 `getFlight`)

2. **模組化開發**：
   - 將功能相似的代碼封裝在同一個文件
   - 避免文件過大，超過 1000 行代碼考慮拆分

## 安全性考量

1. **輸入驗證**：
   - 永遠不要信任前端傳來的資料
   - 在後端實作嚴格的參數驗證

2. **避免 SQL 注入**：
   - 使用 SQLAlchemy 的參數化查詢
   - 不要手動拼接 SQL 字串

3. **避免跨站腳本攻擊 (XSS)**：
   - 在前端顯示資料時使用 Vue 的 v-text 或 v-html (謹慎使用)

4. **敏感資訊處理**：
   - 航空公司 API 密鑰等敏感信息放入環境變數
   - 用戶密碼使用 bcrypt 或 Argon2 加密

## 資料庫設計

1. **索引優化**：
   - 為經常查詢的欄位添加索引 (如機場代碼、航班編號)
   - 如果頻繁按日期查詢，為日期欄位添加索引
   - 資料庫設計請加S

2. **資料關係**：
   - 使用 SQLAlchemy 的關係模型表示資料間的關係
   - 航班與機場、航空公司的關係正確設置

## 效能考量

1. **分頁處理**：
   - 查詢結果可能很多，實現分頁功能
   - 後端: `query.limit(per_page).offset((page-1)*per_page)`
   - 前端: 添加分頁控制元素

2. **緩存策略**：
   - 考慮緩存不常變動的資料如機場列表
   - 可使用 Redis 或簡單的記憶體緩存

3. **延遲載入**：
   - 使用 Vue 的 async components 延遲載入較大組件
   - 大型資料初次只載入必要部分

## API 設計

1. **版本控制**：
   - 在 URL 中包含版本信息 (如 `/api/v1/flights`)
   - 確保向後兼容性

2. **HTTP 狀態碼**：
   - 確保正確使用狀態碼 (200, 201, 400, 401, 404, 500 等)
   - 返回明確的錯誤訊息

3. **統一響應格式**：
   ```json
   {
     "success": true/false,
     "data": [...],
     "message": "錯誤訊息或提示",
     "pagination": {"page": 1, "total": 100}
   }
   ```
## 優化查詢效率：
每次同步時確保獲取最大量的有用資料
仔細設計查詢參數，減少重複或不必要的查詢

## 錯誤處理

1. **全局錯誤處理**：
   - 後端設置全局異常處理
   - 前端設置 Axios 攔截器統一處理錯誤

2. **友好錯誤信息**：
   - 用戶友好的錯誤提示
   - 記錄詳細的錯誤日誌供調試

## 航班系統特有注意點

1. **時區處理**：
   - 顯示時考慮用戶時區和目的地時區

2. **航班狀態更新**：
   - 考慮如何處理航班延誤、取消等狀態變更
   - 可能需要定期與航空公司 API 同步

3. **搜尋條件**：
   - 支持多種搜尋方式 (單程、往返、多城市)
   - 日期範圍、價格範圍、航空公司篩選

## API使用

- 因為API是使用免費方案，請以最佳效率去使用。

## 測試策略

1. **單元測試**：
   - 為關鍵功能編寫測試 (如航班搜尋邏輯)
   - 測試模型驗證和業務邏輯

2. **API 測試**：
   - 使用 Postman 或程式測試 API 端點
   - 測試邊界情況和錯誤處理

以上建議結合了技術細節和業務考量，可以幫助你在開發過程中打下紮實的基礎。
